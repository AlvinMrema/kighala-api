// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: words.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createWord = `-- name: CreateWord :one
INSERT INTO words (id, created_at, updated_at, word)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, word
`

type CreateWordParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Word      string
}

func (q *Queries) CreateWord(ctx context.Context, arg CreateWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, createWord,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Word,
	)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Word,
	)
	return i, err
}

const getWords = `-- name: GetWords :many
SELECT id, created_at, updated_at, word FROM words
`

func (q *Queries) GetWords(ctx context.Context) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, getWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Word,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
