// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: definitions.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDefinition = `-- name: CreateDefinition :one
INSERT INTO definitions (id, created_at, updated_at, word_id, definition, part_of_speech)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, definition, part_of_speech, word_id
`

type CreateDefinitionParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	WordID       uuid.UUID
	Definition   string
	PartOfSpeech string
}

func (q *Queries) CreateDefinition(ctx context.Context, arg CreateDefinitionParams) (Definition, error) {
	row := q.db.QueryRowContext(ctx, createDefinition,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.WordID,
		arg.Definition,
		arg.PartOfSpeech,
	)
	var i Definition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Definition,
		&i.PartOfSpeech,
		&i.WordID,
	)
	return i, err
}

const deleteDefinition = `-- name: DeleteDefinition :exec
DELETE FROM definitions
WHERE id = $1
`

func (q *Queries) DeleteDefinition(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDefinition, id)
	return err
}

const getDefinitionById = `-- name: GetDefinitionById :one
SELECT id, created_at, updated_at, definition, part_of_speech, word_id FROM definitions
WHERE id = $1
`

func (q *Queries) GetDefinitionById(ctx context.Context, id uuid.UUID) (Definition, error) {
	row := q.db.QueryRowContext(ctx, getDefinitionById, id)
	var i Definition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Definition,
		&i.PartOfSpeech,
		&i.WordID,
	)
	return i, err
}

const getDefinitions = `-- name: GetDefinitions :many
SELECT id, created_at, updated_at, definition, part_of_speech, word_id FROM definitions
`

func (q *Queries) GetDefinitions(ctx context.Context) ([]Definition, error) {
	rows, err := q.db.QueryContext(ctx, getDefinitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Definition
	for rows.Next() {
		var i Definition
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Definition,
			&i.PartOfSpeech,
			&i.WordID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefinitionsByWordID = `-- name: GetDefinitionsByWordID :many
SELECT id, created_at, updated_at, definition, part_of_speech, word_id FROM definitions
WHERE word_id = $1
`

func (q *Queries) GetDefinitionsByWordID(ctx context.Context, wordID uuid.UUID) ([]Definition, error) {
	rows, err := q.db.QueryContext(ctx, getDefinitionsByWordID, wordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Definition
	for rows.Next() {
		var i Definition
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Definition,
			&i.PartOfSpeech,
			&i.WordID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDefinition = `-- name: UpdateDefinition :one
UPDATE definitions
SET updated_at = $2, definition = $3, part_of_speech = $4, word_id = $5
WHERE id = $1
RETURNING id, created_at, updated_at, definition, part_of_speech, word_id
`

type UpdateDefinitionParams struct {
	ID           uuid.UUID
	UpdatedAt    time.Time
	Definition   string
	PartOfSpeech string
	WordID       uuid.UUID
}

func (q *Queries) UpdateDefinition(ctx context.Context, arg UpdateDefinitionParams) (Definition, error) {
	row := q.db.QueryRowContext(ctx, updateDefinition,
		arg.ID,
		arg.UpdatedAt,
		arg.Definition,
		arg.PartOfSpeech,
		arg.WordID,
	)
	var i Definition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Definition,
		&i.PartOfSpeech,
		&i.WordID,
	)
	return i, err
}
